package functiondemo

import (
	"fmt"
)

/**
Go语言中没有提供其它面向对象语言的析构函数, 但是Go语言提供了defer语句用于实现其它面向对象语言析构函数的功能

例如C语言中我们申请了一块内存空间,那么不使用时我们就必须释放这块存储空间
例如C语言中我们打开了一个文件,那么我们不使用时就要关闭这个文件
例如C语言中我们打开了一个数据库, 那么我们不使用时就要关闭这个数据库

defer语句常用于释放资源、解除锁定以及错误处理等
这一类的操作在Go语言中都可以通过defer语句来完成

无论你在什么地方注册defer语句,它都会在所属函数执行完毕之后才会执行, 并且如果注册了多个defer语句,那么它们会按照后进先出的原则执行
正是因为defer语句的这种特性, 所以在Go语言中关闭资源不用像C语言那样用完了再关闭, 我们完全可以打开的同时就关闭, 因为无论如何defer语句都会在所属函数执行完毕之后才会执行
*/
func DelayTest() {
	// 后进先出，最后的defer先执行
	defer fmt.Println("first col")
	fmt.Println("execute")
	defer fmt.Println("second col")
}
